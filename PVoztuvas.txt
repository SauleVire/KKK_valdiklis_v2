/* ********** kintamieji Pamaišymo vožtuvui *******************
byte pv_palaikoma_T = 40; // PV palaikoma temperatūra
byte pv_atidarymo_T = 30; // PV palaikoma temperatūra
byte PV_rankinis_ijungimas = 0; // Žymė rankiniam PV valdymui
boolean PV_uzdarytas = true;
boolean PV_atidarytas = false;
boolean PV_atidarinejamas = false;
boolean PV_uzdarinejamas = false;
boolean PV_stop = true;
************************************************************************
#define PV_pilno_atidarymo_trukme 2500
unsigned long PV_pilno_atidarymo_laikas;
unsigned long PV_darinejimo_laikas;
/* *********** PAMAISYMO VOZTUVO SIURBLIO ĮJUNGIMAS ******************** */
void PamaisymoVoztuvoSiusblys(){
if ((KI > pv_ON_T || AV > pv_ON_T) && (PV_siurblys == false)){ // Jei katilo išėjime temperatūra pakyla iki užduotos
    digitalWrite(PVsiurblys, LOW); // siurblys įjungiamas
    PV_siurblys = true; // pažymima, kad siurblys veikia
#ifdef DEBUGpv
Serial.print("PV ijungimo temperatura- ");Serial.print(pv_ON_T);Serial.print(char(186));Serial.println("C");
Serial.println("Pamaisymo voztuvo siublys IJUNGTAS *** ON ***");
#endif
}
    if ((KI < pv_ON_T) && (AV < pv_ON_T) && (PV_siurblys == true)){ // Jei katilo išėjime temperatūra pakyla žemiau užduotos
        digitalWrite(PVsiurblys, HIGH); // siurblys išjungiamas
        PV_siurblys = false; // pažymima, kad siurblys neveikia
#ifdef DEBUGpv
Serial.print("PV isjungimo temperatura- ");Serial.print(pv_OFF_T);Serial.print(char(186));Serial.println("C");
Serial.println("Pamaisymo voztuvo siublys ISJUNGTAS *** OFF ***");
#endif
    }
}

/* ******************************************************************************* */
/* ******************************************************************************* */


void PamaisymoVoztuvoDarbas()
  { 
// Jei katilo išėjime daugiau, negu nustatyta pamaišymo vožtuvo palaikymui,
// vožtuvas A_T_I_D_A_R_I_N_E_J_A_M_A_S arba U_Z_D_A_R_I_N_E_J_A_M_A_S
   if (KI > pv_palaikoma_T || AV > pv_palaikoma_T)
   {// JEI TEMPERATŪRA KRINTA IR VOŽTUVĄ REIKIA ATIDARYTI
    if (PV <= pv_palaikoma_T -1.2 && PV_stop == true && PV_uzdarinejamas == false && millis() >= PV_atidarinejimo_laikas){
        PV_stop = false; // pasižymime, kad vožtuvas jau juda
<<<<<<< HEAD
        PV_atidarytas = true;
//        PV_atidarinejimo_laikas = millis() + 5000; // atsimenamas atidarymo įjungimo laikas
=======
        PV_atidarinejimo_laikas = millis() + 1000; // atsimenamas atidarymo įjungimo laikas
        PV_atidarytas = true; // pažymima, kad vožtuvas nebeuždarytas
>>>>>>> 3ddac62a7f370ac2fa0994bea67c7b788c39e92f
        PV_atidarinejamas = true; // pažymima, kad vožtuvas jau atidarinėjamas
        digitalWrite(PVatidarymas, LOW); // signalas vožtuvui atidaryti
#ifdef DEBUGpv
Serial.println("Pamaisymo voztuvas, pradetas ATIDARINEJIMAS"); 
#endif
   }
     if (PV >= pv_palaikoma_T +1.2 && PV_stop == false && PV_atidarinejamas == true){
          PV_stop = true; // pasižymime, kad vožtuvas jau stabdomas
//          PV_atidarinejimo_laikas = millis() + 1000; // atsimenamas atidarymo įjungimo laikas
          PV_atidarinejamas = false; // pažymima, kad vožtuvas jau nebeuždarinėjamas
          digitalWrite(PVatidarymas, HIGH); // signalas vožtuvui uždaryti
#ifdef DEBUGpv
Serial.println("Pamaisymo voztuvas, Staigus temperaturos kilimas, ATIDARINEJIMAS stabdomas"); 
#endif      
    }
  
   
     // JEI TEMPERATŪRA KYLA IR VOŽTUVĄ REIKIA UŽDARYTI
    if (PV >= pv_palaikoma_T + 1.2 && PV_stop == true && PV_atidarinejamas == false  && millis() >= PV_uzdarinejimo_laikas){
      PV_stop = false; // pasižymime, kad vožtuvas jau juda
<<<<<<< HEAD
      PV_pusiausvyra = false;
      PV_uzdarytas = false;
      PV_uzdarinejimo_laikas = millis() + 5000; // atsimenamas atidarymo įjungimo laikas
      PV_atidarinejimo_laikas = millis() + 5000; // atsimenamas atidarymo įjungimo laikas
=======
      PV_uzdarinejimo_laikas = millis() + 1000; // atsimenamas atidarymo įjungimo laikas
>>>>>>> 3ddac62a7f370ac2fa0994bea67c7b788c39e92f
      PV_uzdarinejamas = true; // pažymima, kad vožtuvas jau uždarinėjamas
      digitalWrite(PVuzdarymas, LOW); // signalas vožtuvui uždaryti
#ifdef DEBUGpv
Serial.println("Pamaisymo voztuvas, pradetas UZDARINEJIMAS"); 
#endif
    }

        if (((PV <= pv_palaikoma_T - 1.2) && (PV_stop == false)) && (PV_uzdarinejamas == true)){
          PV_stop = true; // pasižymime, kad vožtuvas jau stabdomas
//          PV_uzdarinejimo_laikas = millis() + 1000; // atsimenamas atidarymo įjungimo laikas
          PV_uzdarinejamas = false; // pažymima, kad vožtuvas jau nebeuždarinėjamas
          digitalWrite(PVuzdarymas, HIGH); // signalas vožtuvui uždaryti
#ifdef DEBUGpv
Serial.println("Pamaisymo voztuvas, Staigus temperaturos kritimas, UZDARINEJIMAS stabdomas"); 
#endif      
    }
/* ***************************** PUSIAUSVYRA ****************************************** */
// Jei PV temperatūra nusistovėjo
    if (pv_palaikoma_T + 1 > PV 
        && PV >= pv_palaikoma_T - 1 
        && PV_stop == false 
        && (millis() > PV_uzdarinejimo_laikas || millis() > PV_atidarinejimo_laikas)){
      PV_stop = true;                             // pasižymime, kad vožtuvas jau juda
      PV_atidarinejamas = false;                    // pažymima, kad vožtuvas jau uždarinėjamas
      PV_uzdarinejamas = false;                    // pažymima, kad vožtuvas jau uždarinėjamas
      PV_pauze = millis() + 5000;          // atsimenamas atidarymo įjungimo laikas  
      digitalWrite(PVuzdarymas, HIGH);             // signalas vožtuvui uždaryti
      digitalWrite(PVatidarymas, HIGH);            // signalas vožtuvui uždaryti
#ifdef DEBUGpv
Serial.println("Pamaisymo voztuvas, PUSIAUSVYROS PAUZE *** START ***"); 
#endif
    }
<<<<<<< HEAD
// Uždartymas, kai atšala katilas ir akumuliacinė talpa    
if (pv_OFF_T > KI && pv_OFF_T > AV && PV_atidarytas == true) {}

=======
    }
if (KI < pv_OFF_T && AV < pv_OFF_T && PV_atidarytas == true && PV_atidarinejamas == false){
    if (millis() > PV_uzdarinejimo_laikas && PV_stop == true){
      PV_uzdarinejimo_laikas = millis() + 150000;
      digitalWrite(PVuzdarymas, LOW);
      PV_uzdarinejamas == true;
      PV_stop = false;}
      if (millis() > PV_uzdarinejimo_laikas && PV_stop == false){
          PV_stop = true;
          PV_atidarytas = false;
          digitalWrite(PVuzdarymas, HIGH);
#ifdef DEBUGpv
Serial.println("Pamaisymo voztuvas, UZDARYTAS ATSALUS KATILUI IR AKUMULIACINEI TALPAI"); 
#endif
}
             
             
>>>>>>> 3ddac62a7f370ac2fa0994bea67c7b788c39e92f

}
  }
